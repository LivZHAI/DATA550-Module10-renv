)
#use terminal to render the document
#ls
#Rscript render_report.R #running R code in the terminal
#In 'render_report.R', code is:
#library(rmarkdown)
#render("Module4.Rmd")
library(knitr)
#opts_chunk$set: set options for all the entire document (set the default)
opts_chunk$set(
echo=FALSE, warning=FALSE, message=FALSE
#if want to change default in specific chunk, can still do echo=TRUE
)
here::i_am("hiv_report.Rmd")
data <- readRDS(
file = here::here("output/data_clean.rds")
)
#absolute_pat_to_data <- here::here("data/vrc01_data.csv")
#data_url_list <- list(
#  "VRC01" = "https://bit.ly/vrc01_data",
#  "PGT122" = "https://bit.ly/pgt122_data"
#)
#data_url <- data_url_list[[params$antibody]]
#data <- read.csv(data_url, header = TRUE)
table_one <- readRDS(
file = here::here("output/table_one.rds")
)
table_one
# library(labelled)
# library(gtsummary)
# #create the label
# var_label(data) <- list(
#   id = "ID",
#   ab_resistance= "Antibody resistance",
#   region="Region",
#   env_length = "Length of Env protein"
# )
# #exposure stratify table
# data$number_glycans <- ifelse(data$shield_glycans < 4, "<4",">=4") #separate into 2 categories, less and greater or equal
# #use tidyverse
# data |>
#   select("region", "env_length", "ab_resistance", "number_glycans") |>
#   tbl_summary(by = number_glycans)|>
#   modify_spanning_header(c("stat_1", "stat_2") ~ "**PNGs in Glycan Shield**") |> #nice title of the graph #double star for bold, the header name
#   add_overall() |>
#   add_p()
both_regression_tables_filename <- paste0(
"both_regression_tables_config",
WHICH_CONFIG,
".rds"
)
WHICH_CONFIG <- Sys.getenv("WHICH_CONFIG")
config_list <- config::get(
config = WHICH_CONFIG
)
both_regression_tables_filename <- paste0(
"both_regression_tables_config",
WHICH_CONFIG,
".rds"
)
both_regression_tables <- readRDS(
file = here::here("output", both_regression_tables_filename)
)
both_regression_tables$secondary
both_regression_tables_filename <- paste0(
"both_regression_tables_config",
WHICH_CONFIG,
".rds"
)
both_regression_tables <- readRDS(
file = here::here("output", both_regression_tables_filename)
)
print(file.path("output", paste0("both_regression_tables_config", WHICH_CONFIG, ".rds")))
file.exists(file.path("output", paste0("both_regression_tables_config", WHICH_CONFIG, ".rds")))
both_regression_tables_filename <- paste0(
"both_regression_tables_config_",
WHICH_CONFIG,
".rds"
)
both_regression_tables <- readRDS(
file = here::here("output", both_regression_tables_filename)
)
#options in the code chunk with#| can line feed:
#|fig.align = "center
#|out.width = "100px"
#|echo = FALSE
#|message = FALSW
# library(ggplot2)
#
# ggplot(data, aes(x=shield_glycans, y = ab_resistance))+
#   geom_point()+
#   geom_smooth(method = lm)+
#   theme_bw()
knitr::include_graphics(
here::here("output/scatterplot.png")
)
both_regression_tables_filename <- paste0(
"both_regression_tables_config",
WHICH_CONFIG,
".rds"
)
both_regression_tables <- readRDS(
file = here::here("output", both_regression_tables_filename)
)
print(both_regression_tables_filename)
both_regression_tables_filename <- paste0(
"both_regression_tables_config",
WHICH_CONFIG,
".rds"
)
both_regression_tables <- readRDS(
file = here::here("output", both_regression_tables_filename)
)
make regression_analysis
both_regression_tables_filename <- paste0(
"both_regression_tables_config",
WHICH_CONFIG,
".rds"
)
both_regression_tables <- readRDS(
file = here::here("output", both_regression_tables_filename)
)
Rscript code/04_render_report.R
WHICH_CONFIG <- Sys.getenv("WHICH_CONFIG")
config_list <- config::get(
config = WHICH_CONFIG
)
# WHICH_CONFIG <- Sys.getenv("WHICH_CONFIG")
# config_list <- config::get(
#   config = WHICH_CONFIG
# )
WHICH_CONFIG <- "default"
both_regression_tables_filename <- paste0(
"both_regression_tables_config",
WHICH_CONFIG,
".rds"
)
both_regression_tables <- readRDS(
file = here::here("output", both_regression_tables_filename)
)
file_path <- here::here("output", both_regression_tables_filename)
print(file_path)
WHICH_CONFIG <- Sys.getenv("WHICH_CONFIG")
config_list <- config::get(
config = WHICH_CONFIG
)
# WHICH_CONFIG <- "default"
both_regression_tables_filename <- paste0(
"both_regression_tables_config_",
WHICH_CONFIG,
".rds"
)
both_regression_tables <- readRDS(
file = here::here("output", both_regression_tables_filename)
)
file_path <- here::here("output", both_regression_tables_filename)
print( file_path )
both_regression_tables_filename <- paste0(
"both_regression_tables_config_",
WHICH_CONFIG,
".rds"
)
both_regression_tables <- readRDS(
file = here::here("output", both_regression_tables_filename)
)
# WHICH_CONFIG <- Sys.getenv("WHICH_CONFIG")
# config_list <- config::get(
#   config = WHICH_CONFIG
# )
WHICH_CONFIG <- "default"
both_regression_tables_filename <- paste0(
"both_regression_tables_config_",
WHICH_CONFIG,
".rds"
)
both_regression_tables <- readRDS(
file = here::here("output", both_regression_tables_filename)
)
both_regression_tables$primary
# mod <- glm(
#   ab_resistance ~ shield_glycans + region+ env_length,
#   data=data
# )
# #summary(mod)
# tbl_regression(mod)|>
#   add_global_p()
both_regression_tables$secondary
# binary_mod <- glm(
#   I(ab_resistance > params$cutpoint) ~ shield_glycans + region + env_length,
#   data = data,
#   family = binomial() #logistic regression
# )
# tbl_regression(binary_mod, exponentiate=TRUE)|>
#   add_global_p()
#options in the code chunk with#| can line feed:
#|fig.align = "center
#|out.width = "100px"
#|echo = FALSE
#|message = FALSW
# library(ggplot2)
#
# ggplot(data, aes(x=shield_glycans, y = ab_resistance))+
#   geom_point()+
#   geom_smooth(method = lm)+
#   theme_bw()
knitr::include_graphics(
here::here("output/scatterplot.png")
)
#! TO DO:
#!   read random_numbers1 from output directory
random_numbers1 <- readRDS(
here::here("output/random_numbers1.rds")
)
here::i_am(
"report.Rmd"
)
#! TO DO:
#!   read random_numbers1 from output directory
random_numbers1 <- readRDS(
here::here("output/random_numbers1.rds")
)
#! TO DO:
#!   read random_numbers2 from output directory
random_numbers2 <- readRDS(
here::here("output/random_numbers2.rds")
)
#! TO DO:
#!   read random_numbers3 from output directory
random_numbers3 <- readRDS(
here::here("output/random_numbers3.rds")
)
random_numbers4 <- readRDS(
here::here("output/random_numbers4.rds")
)
#| fig.cap = "First set of random numbers"
hist(random_numbers1)
#| fig.cap = "Second set of random numbers"
hist(random_numbers2)
#| fig.cap = "Third set of random numbers"
hist(random_numbers3)
getwd
getwd()
setwd("./Desktop/hiv_project")
renv::activate()
renv::activate()
.libPaths()
renv::status()
install.packages("evaluate")
renv::status()
renv::snapshot()
renv::status()
library(evaluate)
renv::status()
renv::snapshot()
library(cowplot)
renv::snapshot()
renv::snapshot()
#d
L1 <- diff - 1.96 * sqrt(s1sq/n + s2sq/m)
#Q2
X <- c(17, 6, 18, 14, 7, 8, 11, 9, 15)
Y <- c(9, 6, 10, 4, 7, 3, 8)
xbar <- mean(X)
ybar <- mean(Y)
s1sq <- var(X)
s2sq <- var(Y)
ratio <- s1sq/s2sq
F_upper <- qf(1 - 0.05/2, 6, 8)  # F_{0.975}(8,6) if alpha=0.05
F_lower <- qf(0.05/2, 6, 8)      # F_{0.025}(8,6)
#a
CI_lower <- ratio * F_lower
CI_upper <- ratio * F_upper
print(CI_lower)
print(CI_upper)
#b
n <- length(X)
m <- length(Y)
t_val <- qt(1-0.05/2,m+n-2)
sp <- sqrt(((n-1)*s1sq+(m-1)*s2sq)/(n+m-2))
diff <- xbar - ybar
CI_L <- diff-t_val*sp*sqrt(1/m+1/n)
CI_U <- diff+t_val*sp*sqrt(1/m+1/n)
print(CI_L)
print(CI_U)
#c
k <- (s1sq/n + s2sq/m)^2/((s1sq/n)^2/(n-1) + (s2sq/m)^2/(m-1))
t_cri <- qt(1-0.05/2,13)
CI_l <- diff-t_cri*sqrt(s1sq/m+s2sq/n)
CI_u <- diff+t_cri*sqrt(s1sq/m+s2sq/n)
print(CI_l)
print(CI_u)
alpha <- 0.05
n <- 25
m <- 50 - n
X_bar <- 27
S_sq <- 4
L <- (n+m) * X_bar - sqrt((m+m^2/n)*S_sq) * qt(1-alpha/2,n-1)
U <- (n+m) * X_bar + sqrt((m+m^2/n)*S_sq) * qt(1-alpha/2,n-1)
print(L)
print(U)
#d
L1 <- diff - 1.96 * sqrt(s1sq/n + s2sq/m)
U1 <- diff + 1.96 * sqrt(s1sq/n + s2sq/m)
print(L1)
print(U1)
#Q2
X <- c(17, 6, 18, 14, 7, 8, 11, 9, 15)
Y <- c(9, 6, 10, 4, 7, 3, 8)
xbar <- mean(X)
ybar <- mean(Y)
s1sq <- var(X)
s2sq <- var(Y)
ratio <- s1sq/s2sq
F_upper <- qf(1 - 0.05/2, 6, 8)  # F_{0.975}(8,6) if alpha=0.05
F_lower <- qf(0.05/2, 6, 8)      # F_{0.025}(8,6)
#a
CI_lower <- ratio * F_lower
CI_upper <- ratio * F_upper
print(CI_lower)
print(CI_upper)
#b
n <- length(X)
m <- length(Y)
t_val <- qt(1-0.05/2,m+n-2)
sp <- sqrt(((n-1)*s1sq+(m-1)*s2sq)/(n+m-2))
diff <- xbar - ybar
CI_L <- diff-t_val*sp*sqrt(1/m+1/n)
CI_U <- diff+t_val*sp*sqrt(1/m+1/n)
print(CI_L)
print(CI_U)
#c
k <- (s1sq/n + s2sq/m)^2/((s1sq/n)^2/(n-1) + (s2sq/m)^2/(m-1))
t_cri <- qt(1-0.05/2,13)
CI_l <- diff-t_cri*sqrt(s1sq/m+s2sq/n)
CI_u <- diff+t_cri*sqrt(s1sq/m+s2sq/n)
print(CI_l)
print(CI_u)
#d
L1 <- diff - 1.96 * sqrt(s1sq/n + s2sq/m)
U1 <- diff + 1.96 * sqrt(s1sq/n + s2sq/m)
print(L1)
print(U1)
print(diff)
print(s1sq)
print(s2sq)
print(sqrt(s1sq/n + s2sq/m))
#Q6
X <- c(4, 0, 1, 2, 1, 0, 3)
n <- length(X)
xbar <- mean(X)
xbar^2-1.96*sqrt(4*xbar^3/n)
xbar^2+1.96*sqrt(4*xbar^3/n)
xbar
#b
(xbar-1.96*sqrt(xbar/n))^2
(xbar+1.96*sqrt(xbar/n))^2
#c
(2*sqrt(xbar)-1.96*1/sqrt(n))^4/2^4
(2*sqrt(xbar)+1.96*1/sqrt(n))^4/2^4
#Q6
X <- c(4, 0, 1, 2, 1, 0, 3)
#d
s_sq <- var(X)
xbar^2-1.96*sqrt(4*xbar^2*s_sq/n)
xbar^2+1.96*sqrt(4*xbar^2*s_sq/n)
var(X)
counts <- c(4, 0, 1, 2, 1, 0, 3)
# 1) Basic quantities
n     <- length(counts)
xbar  <- mean(counts)       # MLE for mu
muHat <- xbar
# 2) Transform to theta = 2 * sqrt(mu)
thetaHat <- 2 * sqrt(muHat)
# 3) Asymptotic 95% CI for theta
alpha   <- 0.05
zCrit   <- qnorm(1 - alpha/2)         # ~ 1.96
margin  <- zCrit / sqrt(n)
thetaLo <- thetaHat - margin
thetaHi <- thetaHat + margin
# 4) Invert the interval endpoints to get a CI for mu^2:
#    mu^2 = (theta^4) / 16
muSqLo  <- (thetaLo^4) / 16
muSqHi  <- (thetaHi^4) / 16
cat("MLE for mu =", muHat, "\n")
cat("thetaHat    =", thetaHat, "\n")
cat(sprintf("95%% CI for mu^2 via transform: (%.3f, %.3f)\n", muSqLo, muSqHi))
counts <- c(4, 0, 1, 2, 1, 0, 3)  # n=7
n     <- length(counts)
xbar  <- mean(counts)          # estimate of mu
s2    <- var(counts)           # sample variance for unknown sigma^2
# z-critical for 95% CI
z_crit <- qnorm(0.975)  # ~1.96
# Delta-method standard error for mu^2:
# Var( xbar^2 ) ~ 4 * xbar^2 * s2 / n
se_mu2 <- sqrt(4 * xbar^2 * s2 / n)
# Margin of error
margin <- z_crit * se_mu2
# Confidence interval for mu^2
lower <- xbar^2 - margin
upper <- xbar^2 + margin
cat("Sample mean        =", xbar, "\n")
cat("Sample variance    =", s2,   "\n")
cat(sprintf("95%% CI for mu^2 => (%.3f, %.3f)\n", lower, upper))
setwd
source("renv/activate.r")
source("renv/activate.R")
renv::status()
renv::restore()
renv::activate()
make install
cd ../Stan_Modelling/
setwd("../Stan_Modelling/")
install.packages("rstan")
library(rstan)
file.copy(from = "../Bayesian Workflow for Modeling Shedding Dynamics using Rstan/expon1.stan",
to = "../Stan_Modelling/")
#Q2
X <- c(17, 6, 18, 14, 7, 8, 11, 9, 15)
Y <- c(9, 6, 10, 4, 7, 3, 8)
xbar <- mean(X)
ybar <- mean(Y)
s1sq <- var(X)
s2sq <- var(Y)
#c
k <- (s1sq/n + s2sq/m)^2/((s1sq/n)^2/(n-1) + (s2sq/m)^2/(m-1))
#Q2
X <- c(17, 6, 18, 14, 7, 8, 11, 9, 15)
Y <- c(9, 6, 10, 4, 7, 3, 8)
xbar <- mean(X)
ybar <- mean(Y)
s1sq <- var(X)
s2sq <- var(Y)
ratio <- s1sq/s2sq
F_upper <- qf(1 - 0.05/2, 6, 8)  # F_{0.975}(8,6) if alpha=0.05
F_lower <- qf(0.05/2, 6, 8)      # F_{0.025}(8,6)
#a
CI_lower <- ratio * F_lower
CI_upper <- ratio * F_upper
print(CI_lower)
print(CI_upper)
#b
n <- length(X)
m <- length(Y)
t_val <- qt(1-0.05/2,m+n-2)
sp <- sqrt(((n-1)*s1sq+(m-1)*s2sq)/(n+m-2))
diff <- xbar - ybar
CI_L <- diff-t_val*sp*sqrt(1/m+1/n)
CI_U <- diff+t_val*sp*sqrt(1/m+1/n)
print(CI_L)
print(CI_U)
#c
k <- (s1sq/n + s2sq/m)^2/((s1sq/n)^2/(n-1) + (s2sq/m)^2/(m-1))
t_cri <- qt(1-0.05/2,13)
CI_l <- diff-t_cri*sqrt(s1sq/m+s2sq/n)
CI_u <- diff+t_cri*sqrt(s1sq/m+s2sq/n)
print(CI_l)
print(CI_u)
sqrt(s1sq/m+s2sq/n)
CI_l <- diff-t_cri*sqrt(s1sq/n+s2sq/m)
CI_u <- diff+t_cri*sqrt(s1sq/n+s2sq/m)
print(CI_l)
print(CI_u)
#Q4(b)
alpha <- 0.05
n <- 25
m <- 50 - n
X_bar <- 27
S_sq <- 4
L <- (n+m) * X_bar - sqrt((m+m^2/n)*S_sq) * qt(1-alpha/2,n-1)
U <- (n+m) * X_bar + sqrt((m+m^2/n)*S_sq) * qt(1-alpha/2,n-1)
print(L)
print(U)
qt(1-alpha/2,n-1)
qf(0.05, 3, 20)
qf(0.95, 3, 20)
-2.3667-1.6128*sqrt(3*3.1)
-2.3667+1.6128*sqrt(3*3.1)
source("./models/plotting_helper.R")
shedding.data <- data.frame(subjects = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2),
day = c(5,6,7,8,9,10,11,12,14,15,16,5,6,7,8,9,10,11,12,14,15,16,16,17,19,21,24,16,17,19,21,24),
ct_value = c(24.64, 19.83, 28.05, 22.25, 25.3, NA, NA, 27.22, NA, NA, NA, NA, NA, 30.04, NA, NA, NA, NA, NA, 39.51, NA, NA, NA, 36.27, NA, NA, 34.29, 33.45, NA, NA, NA, 37.66, 37.75, 35.54, 33.29, NA, 28.2, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 30.45, NA, NA, NA))
length(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2))
length(c(5,6,7,8,9,10,11,12,14,15,16,5,6,7,8,9,10,11,12,14,15,16,16,17,19,21, 24, 16, 17, 19, 21, 24))
length(c(24.64, 19.83, 28.05, 22.25, 25.3, NA, NA, 27.22, NA, NA, NA, NA, NA, 30.04, NA, NA, NA, NA, NA, 39.51, NA, NA, NA, 36.27, NA, NA, 34.29, 33.45, NA, NA, NA, 37.66, 37.75, 35.54, 33.29, NA, 28.2, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 30.45, NA, NA, NA)))
length(c(24.64, 19.83, 28.05, 22.25, 25.3, NA, NA, 27.22, NA, NA, NA, NA, NA, 30.04, NA, NA, NA, NA, NA, 39.51, NA, NA, NA, 36.27, NA, NA, 34.29, 33.45, NA, NA, NA, 37.66, 37.75, 35.54, 33.29, NA, 28.2, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 30.45, NA, NA, NA))
shedding.data <- data.frame(subjects = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2),
day = c(5,6,7,8,9,10,11,12,14,15,16,5,6,7,8,9,10,11,12,14,15,16,16,17,19,21, 24, 16, 17, 19, 21, 24),
ct_value = c(NA, NA, NA, 36.27, NA, NA, 34.29, 33.45, NA, NA, NA, 37.66, 37.75, 35.54, 33.29, NA, 28.2, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 30.45, NA, NA, NA))
censorlimit = 2 ##log10 scale limit of quantification
#Create an indicator for noncensored observations of Subject 1;
ind <- which(shedding.data$subjects==1 & !is.na(shedding.data$value))
#Create input data for Stan model
data_one_noncensored <- list(
"nobs"=length(ind), #number of noncensored observations;
"t" = shedding.data$day[ind], #days after symptom onset;
"c" = shedding.data$ct_value[ind] #log10 concentration of SARS-CoV-2 RNA (copies per mL);
)
rm(ind) #remove the indicator;
data_one_noncensored
getwd()
setwd("/Users/wwww/Desktop/DATA550-Module10-renv")
renv::restore()
renv::restore()
renv::snapshot()
library(here)
install.packages("here")
install.packages("here")
renv::snapshot()
renv::restore()
renv::snapshot()
install.packages("here")
renv::restore()
